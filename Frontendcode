<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Student Management System</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 30px auto;
      padding: 20px;
    }
    form input {
      padding: 8px;
      margin: 5px;
      width: 200px;
    }
    form button {
      padding: 8px 16px;
      margin: 5px;
    }
    table {
      width: 100%;
      margin-top: 20px;
      border-collapse: collapse;
    }
    th, td {
      padding: 10px;
      border: 1px solid #13ebeb;
      text-align: center;
    }
    th {
      background: #08e9e99a;
    }
  </style>
</head>
<body>

  <h1>Student Management System</h1>

  <!-- Form for Adding/Updating Students -->
  <form id="studentForm">
    <input type="hidden" id="studentId">
    <input type="text" id="name" placeholder="Name" required>
    <input type="number" id="percentage" placeholder="Percentage" required>
    <button type="submit">Save</button>
    <button type="button" id="cancelBtn" style="display:none;">Cancel</button>
  </form>

  <!-- Table for Displaying Students -->
  <table>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Percentage</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="studentTableBody"></tbody>
  </table>

  <script>
    const API_URL = 'http://localhost:8080/students';

    const form = document.getElementById('studentForm');
    const nameInput = document.getElementById('name');
    const percentageInput = document.getElementById('percentage');
    const studentIdInput = document.getElementById('studentId');
    const cancelBtn = document.getElementById('cancelBtn');
    const tableBody = document.getElementById('studentTableBody');

    // Load all students from backend
    async function loadStudents() {
      const response = await fetch(API_URL);
      const students = await response.json();
      renderTable(students);
    }

    // Render table rows
    function renderTable(students) {
      tableBody.innerHTML = '';
      if (students.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="4">No students found</td></tr>';
        return;
      }
      students.forEach(s => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${s.id}</td>
          <td>${s.name}</td>
          <td>${s.percentage}</td>
          <td>
            <button onclick="editStudent(${s.id}, '${s.name}', ${s.percentage})">Edit</button>
            <button onclick="deleteStudent(${s.id})">Delete</button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    }

    // Handle form submit (create/update)
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const id = studentIdInput.value;
      const name = nameInput.value.trim();
      const percentage = parseFloat(percentageInput.value);

      if (!name || isNaN(percentage)) {
        alert("Please enter valid name and percentage");
        return;
      }

      const student = { name, percentage };

      if (id) {
        // Update
        await fetch(`${API_URL}/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(student)
        });
      } else {
        // Create
        await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(student)
        });
      }

      resetForm();
      loadStudents();
    });

    // Edit student
    window.editStudent = (id, name, percentage) => {
      studentIdInput.value = id;
      nameInput.value = name;
      percentageInput.value = percentage;
      cancelBtn.style.display = 'inline-block';
    };

    // Cancel editing
    cancelBtn.addEventListener('click', resetForm);

    // Reset form
    function resetForm() {
      studentIdInput.value = '';
      nameInput.value = '';
      percentageInput.value = '';
      cancelBtn.style.display = 'none';
    }

    // Delete student
    window.deleteStudent = async (id) => {
      if (confirm('Are you sure you want to delete this student?')) {
        await fetch(`${API_URL}/${id}`, { method: 'DELETE' });
        loadStudents();
      }
    };

    // Initial load
    loadStudents();
  </script>

</body>
</html>
